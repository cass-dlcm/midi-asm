Microsoft (R) Macro Assembler Version 14.26.28806.0	    06/29/20 17:34:27
..\..\Programming\midi-asm\main.asm			     Page 1 - 1


				.686P
				.MODEL flat, stdcall
				.STACK 4096
				includelib Kernel32.lib
 00000000			.data 
				extern fileNamePrompt:BYTE
				extern fileNamePromptLen:DWORD
				extern tempoPrompt:BYTE
				extern tempoPromptLen:DWORD
				extern minTempoPrompt:BYTE
				extern minTempoPromptLen:DWORD
				extern maxTempoPrompt:BYTE
				extern maxTempoPromptLen:DWORD
				extern outTempoPrompt:BYTE
				extern outTempoPromptLen:DWORD
				extern measurePrompt:BYTE
				extern measurePromptLen:DWORD
				extern minMeasurePrompt:BYTE
				extern minMeasurePromptLen:DWORD
				extern maxMeasurePrompt:BYTE
				extern maxMeasurePromptLen : DWORD
				extern outMeasurePrompt : BYTE
				extern outMeasurePromptLen : DWORD
				extern errorMsg : BYTE
				extern invalidRange : BYTE
				extern testStr : BYTE
				extern crLfStr : BYTE
				extern consoleOutHandle : DWORD
				extern consoleInHandle : DWORD
				extern bytesRead : DWORD
				extern numStr : BYTE
				extern drumOffset : DWORD

				externdef track3Chunk : dword

 00000000  000000FF [		fileName BYTE 0ffh DUP(0)
	    00
	   ]

 000000FF 43 00 00 00 43	rootNames BYTE "C", 0, 0, 0,
	   23 00 00 44 00
	   00 00 44 23 00
	   00 45 00 00 00
	   46 00 00 00 46
	   23 00 00 47 00
	   00 00 47 23 00
	   00 41 00 00 00
	   41 23 00 00 42
	   00
				"C#", 0, 0,
				"D", 0, 0, 0,
				"D#", 0, 0,
				"E", 0, 0, 0,
				"F", 0, 0, 0,
				"F#", 0, 0,
				"G", 0, 0, 0,
				"G#", 0, 0,
				"A", 0, 0, 0,
				"A#", 0, 0,
				"B", 0

 0000012D 4D			chordNames BYTE "M", 5 DUP(0), "m", 5 DUP(0),
	   00000005 [
	    00
	   ] 6D
	   00000005 [
	    00
	   ] 35
	   00000005 [
	    00
	   ] 37
	   00000005 [
	    00
	   ] 4D 37
	   00000004 [
	    00
	   ] 6D 37
	   00000004 [
	    00
	   ] 6D 4D 37 00
	   00 00
				"5", 5 DUP(0), "7", 5 DUP(0),
				"M7", 4 DUP(0), "m7", 4 DUP(0), "mM7", 0, 0, 0
 00000157 36			chordNames2 BYTE "6", 5 DUP(0), "m6", 4 DUP(0),
	   00000005 [
	    00
	   ] 6D 36
	   00000004 [
	    00
	   ] 61 64 64 39
	   00 00 6D 61 64
	   64 39 00 37 62
	   35 00 00 00 37
	   23 35 00 00 00
	   6D 37 62 35 00
	   00 6D 37 23 35
	   00
				"add9", 0, 0, "madd9", 0,
				"7b5", 0, 0, 0, "7#5", 0, 0, 0,
				"m7b5", 0, 0, "m7#5", 0

 00000186 04 07 0C 03 07	chordVals BYTE 4, 7, 12, 3, 7, 12, ; M& m
	   0C 07 0C 13 04
	   07 0A 04 07 0B
	   03 07 0A 03 07
	   0B 04 07 09 03
	   07 09 02 04 07
	   02 03 07 04 06
	   0A 04 08 0A 03
	   06 0A 03 08 0A
				7, 12, 19, 4, 7, 10, ; 5 & 7
				4, 7, 11, 3, 7, 10, 3, 7, 11, ; M7, m7, & mM7
				4, 7, 9, 3, 7, 9, ; 6 & m6
				2, 4, 7, 2, 3, 7, ; add9& madd9
				4, 6, 10, 4, 8, 10, ; 7b5 & 7#5
				3, 6, 10, 3, 8, 10; m7b5& m7#5

				; header
 000001B3 4D 54 68 64 00	headerChunk db "MThd", ; file identifier
	   00 00 06 00 01
	   00 04 00 60
				0, 0, 0, 6, ; length of remaining header chunk
				0, 1, ; midi format
				0, 4, ; number of tracks
				0, 60h; number of divisions in a quarter note
 000001C1 = 0000000E		headerChunkLen equ $ - headerChunk; length of the header

				; meta track
 000001C1 4D 54 72 6B 00	track0Chunk db 4dh, 54h, 72h, 6bh, ; track identifier
	   00 00 19 00 FF
	   51 03 00 00 00
	   00 FF 58 04 04
	   02 18 08 00 FF
	   59 02 00 00 00
	   FF 2F 00
				0, 0, 0, 25, ; length of remainig track data
				0, 0FFh, 51h, 3, 0, 0, 0, ; tempo of song
				0, 0FFh, 58h, 4, 4, 2, 18h, 8, ; time signature of song
				0, 0FFh, 59h, 2, 0, 0, ; key signature of song
				00h, 0FFh, 2Fh, 0; end of track
 000001E2 = 00000021		track0ChunkLen equ $ - track0Chunk; length of the entire track
 000001E2 00000000		minTempo dword 0
 000001E6 00000000		tempo dword 0

				; piano track
 000001EA 0000084F		track1ChunkLen dword 84fh

				; guitar track
 000001EE 0000100F		track2ChunkLen dword 100fh

				; drum track
 000001F2 0000100F		track3ChunkLen dword 100fh

 000001F6 0000003C		cPitch dword 3Ch; middle c in midi

 000001FA 00000000		minMeasures dword 0; minimum number of measrues to generate
 000001FE 00000000		measureCount dword 0; variable of measures to generate

 00000202 00			sequenceCount db 0

 00000203 3C			currentPitch byte 3ch
 00000204 00			currentChord byte 0

 = 00000008			HEAP_ZERO_MEMORY = 8h
 = 00000000			NULL = 0
 =-00000001			INVALID_HANDLE_VALUE = -1
 = 00000400			LOCALE_USER_DEFAULT = 400h
 = 00000800			LOCALE_SYSTEM_DEFAULT = 800h

 00000205  00000008 [		inString BYTE 8 DUP(0), "h"
	    00
	   ] 68

 0000020E 48 48 20 6D 6D	format BYTE "HH mm ss", 0
	   20 73 73 00

 00000217 00000000		hFile  DWORD ? ; handle to the file
 0000021B 00000000		hHeap  DWORD ? ; handle to the heap
 0000021F 00000000		bytesWritten dd ?
 00000223 00000000		track1Chunk dword ?
 00000227 00000000		track2Chunk dword ?
 0000022B 00000000		track3Chunk dword ?
 00000000			.code

				; windows procedures
				CloseHandle PROTO,
				    hObject:DWORD

				ExitProcess PROTO,
				    uExitCode : DWORD

				GetLastError PROTO

				GetProcessHeap PROTO

				GetTimeFormatA PROTO,
				    Locale : DWORD,
				    dwFlags : DWORD,
				    lpTime : DWORD,
				    lpFormat : DWORD,
				    lpTimeStr : DWORD,
				    cchTime : DWORD

				HeapAlloc PROTO,
				    hHeap : DWORD, ; handle to private heap block
				    dwFlags : DWORD, ; heap allocation control flags
				    dwBytes : DWORD; number of bytes to allocate

				HeapFree PROTO,
				    hHeap : DWORD, ; handle to heap with memory block
				    dwFlags : DWORD, ; heap free options
				    lpMem : DWORD; pointer to block to be freed

				; procedures from consoleIO.asm
				ConsoleWriteHex PROTO,
				    num : DWORD

				hexStrToNum PROTO,
				    value : DWORD

				initIO PROTO

				readConsole PROTO,
				    readLoc : DWORD,
				    readAmount : DWORD

				writeConsole PROTO,
				    prompt : DWORD,
				    promptSize : DWORD

				; procedures from random.asm
				randInit PROTO

				randRange PROTO,
				    upperBound : BYTE

				; procedures from fileIO.asm
				fileCreate PROTO,
				    pFilename : PTR BYTE

				fileWrite PROTO,
				    hFile : DWORD,
				    lpBuffer : DWORD,
				    nNumberOfBytesToWrite : DWORD

				; procedures from midi.asm
				noteEvent proto,
				    time:byte,
				    event:byte,
				    pitch:byte

				; procedures from drumGen.asm
				drumChoose proto

				; ------------------------------------------------------------------------------ -
 00000000			Error PROC
				; ------------------------------------------------------------------------------ -
				    invoke writeConsole, edx, ecx
				    invoke ExitProcess, 0
 0000000E  C3			    ret
 0000000F			Error ENDP

 0000000F			main PROC
				    ; initialize the randomizer
 0000000F  E8 00000000 E	    call randInit
				    invoke GetProcessHeap
				    .if eax == NULL
 0000001D  E9 00000B6E		        jmp quit
				    .endif
 00000022  A3 0000021B R	    mov hHeap, eax

 00000027  E8 00000000 E	    call initIO
				    
				    ; prompt for the filename and create the file, creating the header chunk
				    invoke GetTimeFormatA, LOCALE_SYSTEM_DEFAULT, NULL, NULL, offset format, offset fileName, 10
 00000046  B8 00000008		    mov eax, 8
 0000004B  C6 80 00000000 R	    mov fileName[eax], "."                      ; add .mid extension to file name
	   2E
 00000052  C6 80 00000001 R	    mov fileName[eax+1], "m"
	   6D
 00000059  C6 80 00000002 R	    mov fileName[eax+2], "i"
	   69
 00000060  C6 80 00000003 R	    mov fileName[eax+3], "d"
	   64
				    INVOKE fileCreate, ADDR fileName
				    .if EAX == INVALID_HANDLE_VALUE             ; checks for invalid handle
 00000076  E9 00000B15		        jmp quit                                ; quits program
				    .endif
 0000007B  A3 00000217 R	    mov hFile,eax
 00000080  B9 0000000E		    mov ecx, headerChunkLen
 00000085  BA 000001B3 R	    mov edx, OFFSET headerChunk
				    invoke fileWrite, eax, edx, ecx
				    .if EAX == 0
 00000096  E9 00000AEA		        jmp closeAndQuit
				    .endif

				    ; prompt for tempo and display the result to the user
 0000009B  BA 00000000 E	    mov edx, OFFSET tempoPrompt
				    invoke writeConsole, offset tempoPrompt, tempoPromptLen
				    invoke writeConsole, offset crLfStr, 2
				    invoke writeConsole, offset minTempoPrompt, minTempoPromptLen
				    invoke readConsole, offset inString, 11
				    INVOKE hexStrToNum, OFFSET inString
				    ;INVOKE consoleWriteHex, eax
 000000E2  83 F8 00		    cmp eax, 0
 000000E5  7F 0F		    jg tempoContinue0
 000000E7  BA 00000000 E	    mov edx, OFFSET invalidRange
 000000EC  B9 00000001		    mov ecx, sizeof invalidRange
 000000F1  E8 FFFFFF0A		    call Error
 000000F6			tempoContinue0:
 000000F6  A3 000001E2 R	    mov minTempo, eax
				    invoke writeConsole, offset maxTempoPrompt, maxTempoPromptLen
				    invoke readConsole, offset inString, 11
				    invoke hexStrToNum, offset inString
 00000121  3B 05 000001E2 R	    cmp eax, minTempo
 00000127  73 0F		    jae tempoContinue
 00000129  BA 00000000 E	    mov edx, OFFSET invalidRange
 0000012E  B9 00000001		    mov ecx, sizeof invalidRange
 00000133  E8 FFFFFEC8		    call Error
 00000138			tempoContinue:
 00000138  2B 05 000001E2 R	    sub eax, minTempo
				    invoke randRange, al
 00000144  03 05 000001E2 R	    add eax, minTempo
 0000014A  A3 000001E6 R	    mov tempo, eax
				    invoke writeConsole, offset outTempoPrompt, outTempoPromptLen
				    invoke ConsoleWriteHex, tempo
				    invoke writeConsole, offset crLfStr, 2

				    ; store the tempo
 00000176  8B 1D 000001E6 R	    mov ebx, tempo
 0000017C  B8 03938700		    mov eax, 60000000
 00000181  33 D2		    xor edx, edx
 00000183  F7 F3		    div ebx
 00000185  A2 000001CF R	    mov track0Chunk[0eh], al
 0000018A  C1 E8 08		    shr eax, 8
 0000018D  A2 000001CE R	    mov track0Chunk[0dh], al
 00000192  C1 E8 08		    shr eax, 8
 00000195  A2 000001CD R	    mov track0Chunk[0ch], al

				    ; write the meta chunk
 0000019A  B9 00000021		    mov ecx, track0ChunkLen
 0000019F  A1 00000217 R	    mov eax, hFile
 000001A4  BA 000001C1 R	    mov edx, OFFSET track0Chunk
				    invoke fileWrite, eax, edx, ecx
				    .if EAX == 0
 000001B5  E9 000009CB		        jmp closeAndQuit
				    .endif

 000001BA			random:
				    ; prompt for measures and display the result to the user
				    invoke writeConsole, offset measurePrompt, measurePromptLen
				    invoke writeConsole, offset crLfStr, 2
				    invoke writeConsole, offset minMeasurePrompt, minMeasurePromptLen
				    invoke readConsole, offset inString, 11
				    invoke hexStrToNum, offset inString
 000001FC  83 F8 00		    cmp eax, 0
 000001FF  7F 0F		    jg randomContinue0
 00000201  BA 00000000 E	    mov edx, OFFSET invalidRange
 00000206  B9 00000001		    mov ecx, sizeof invalidRange
 0000020B  E8 FFFFFDF0		    call Error
 00000210			randomContinue0:
 00000210  A3 000001FA R	    mov minMeasures, eax
				    invoke writeConsole, offset maxMeasurePrompt, maxMeasurePromptLen
				    invoke readConsole, offset inString, 11
				    invoke hexStrToNum, offset inString
 0000023B  3B 05 000001FA R	    cmp eax, minMeasures
 00000241  73 0F		    jae randomContinue1
 00000243  BA 00000000 E	    mov edx, OFFSET invalidRange
 00000248  B9 00000001		    mov ecx, sizeof invalidRange
 0000024D  E8 FFFFFDAE		    call Error
 00000252			randomContinue1:
 00000252  2B 05 000001FA R	    sub eax, minMeasures
				    invoke randRange, al
 0000025E  03 05 000001FA R	    add eax, minMeasures
 00000264  A3 000001FE R	    mov measureCount, eax
				    invoke writeConsole, offset outMeasurePrompt, outMeasurePromptLen
				    invoke ConsoleWriteHex, measureCount
				    invoke writeConsole, offset crLfStr, 2
 00000290  EB 00		    jmp trackPrep

 00000292			trackPrep:
 00000292  A1 000001FE R	    mov eax, measureCount
 00000297  BB 00000021		    mov ebx, 33
 0000029C  33 D2		    xor edx, edx
 0000029E  F7 E3		    mul ebx
 000002A0  83 C0 0F		    add eax, 0fh
 000002A3  A3 000001EA R	    mov track1ChunkLen, eax
 000002A8  A1 000001FE R	    mov eax, measureCount
 000002AD  BB 00000040		    mov ebx, 40h
 000002B2  33 D2		    xor edx, edx
 000002B4  F7 E3		    mul ebx
 000002B6  83 C0 0F		    add eax, 0fh
 000002B9  A3 000001EE R	    mov track2ChunkLen, eax
 000002BE  A1 000001FE R	    mov eax, measureCount
 000002C3  BB 00000140		    mov ebx, 140h
 000002C8  33 D2		    xor edx, edx
 000002CA  F7 E3		    mul ebx
 000002CC  83 C0 0F		    add eax, 0fh
 000002CF  A3 000001F2 R	    mov track3ChunkLen, eax

				    ; allocate memory for track 1
				    invoke HeapAlloc, hHeap, HEAP_ZERO_MEMORY, track1ChunkLen
				    .if eax == NULL
 000002EB  E9 00000895		        jmp closeAndQuit
				    .endif
 000002F0  A3 00000223 R	    mov track1Chunk, eax

				    ; set meta info for track 1
 000002F5  8B 3D 00000223 R	    mov edi, track1Chunk
 000002FB  C6 07 4D		    mov [edi], BYTE PTR "M"
 000002FE  C6 47 01 54		    mov [edi+1], BYTE PTR "T"
 00000302  C6 47 02 72		    mov [edi+2], BYTE PTR "r"
 00000306  C6 47 03 6B		    mov [edi+3], BYTE PTR "k"
 0000030A  A1 000001EA R	    mov eax, track1ChunkLen
 0000030F  83 E8 08		    sub eax, 8
 00000312  88 47 07		    mov [edi+7], al
 00000315  88 67 06		    mov [edi+6], ah
 00000318  C1 E8 08		    shr eax, 8
 0000031B  88 67 05		    mov [edi+5], ah
 0000031E  C1 E8 08		    shr eax, 8
 00000321  88 67 04		    mov [edi+4], ah
 00000324  C6 47 08 00		    mov [edi+8], BYTE PTR 0
 00000328  C6 47 09 C0		    mov [edi+9], BYTE PTR 0C0h
 0000032C  C6 47 0A 00		    mov [edi+0ah], BYTE PTR 0
 00000330  03 3D 000001EA R	    add edi, track1ChunkLen
 00000336  C6 47 FC 00		    mov [edi-4], BYTE PTR 0
 0000033A  C6 47 FD FF		    mov [edi-3], BYTE PTR 0ffh
 0000033E  C6 47 FE 2F		    mov [edi-2], BYTE PTR 2fh
 00000342  C6 47 FF 00		    mov [edi-1], BYTE PTR 0

				    ; allocate memory for track 2
				    invoke HeapAlloc, hHeap, HEAP_ZERO_MEMORY, track2ChunkLen
 00000359  A3 00000227 R	    mov track2Chunk, eax

				    ; set meta info for track 2
 0000035E  8B 3D 00000227 R	    mov edi, track2Chunk
 00000364  C6 07 4D		    mov [edi], BYTE PTR "M"
 00000367  C6 47 01 54		    mov [edi+1], BYTE PTR "T"
 0000036B  C6 47 02 72		    mov [edi+2], BYTE PTR "r"
 0000036F  C6 47 03 6B		    mov [edi+3], BYTE PTR "k"
 00000373  A1 000001EE R	    mov eax, track2ChunkLen
 00000378  83 E8 08		    sub eax, 8
 0000037B  88 47 07		    mov [edi+7], al
 0000037E  88 67 06		    mov [edi+6], ah
 00000381  C1 E8 08		    shr eax, 8
 00000384  88 67 05		    mov [edi+5], ah
 00000387  C1 E8 08		    shr eax, 8
 0000038A  88 67 04		    mov [edi+4], ah
 0000038D  C6 47 08 00		    mov [edi+8], BYTE PTR 0
 00000391  C6 47 09 C1		    mov [edi+9], BYTE PTR 0C1h
 00000395  C6 47 0A 19		    mov [edi+0ah], BYTE PTR 25
 00000399  03 3D 000001EE R	    add edi, track2ChunkLen
 0000039F  C6 47 FC 00		    mov [edi-4], BYTE PTR 0
 000003A3  C6 47 FD FF		    mov [edi-3], BYTE PTR 0ffh
 000003A7  C6 47 FE 2F		    mov [edi-2], BYTE PTR 2fh
 000003AB  C6 47 FF 00		    mov [edi-1], BYTE PTR 0

				    ; allocate memory for track 3
				    invoke HeapAlloc, hHeap, HEAP_ZERO_MEMORY, track3ChunkLen
				    .if eax == NULL
 000003C6  E9 000007BA		        jmp closeAndQuit
				    .endif
 000003CB  A3 0000022B R	    mov track3Chunk, eax

				    ; set meta info for track 3
 000003D0  8B 3D 0000022B R	    mov edi, track3Chunk
 000003D6  C6 07 4D		    mov [edi], BYTE PTR "M"
 000003D9  C6 47 01 54		    mov [edi+1], BYTE PTR "T"
 000003DD  C6 47 02 72		    mov [edi+2], BYTE PTR "r"
 000003E1  C6 47 03 6B		    mov [edi+3], BYTE PTR "k"
 000003E5  A1 000001F2 R	    mov eax, track3ChunkLen
 000003EA  83 E8 08		    sub eax, 8
 000003ED  88 47 07		    mov [edi+7], al
 000003F0  88 67 06		    mov [edi+6], ah
 000003F3  C1 E8 08		    shr eax, 8
 000003F6  88 67 05		    mov [edi+5], ah
 000003F9  C1 E8 08		    shr eax, 8
 000003FC  88 67 04		    mov [edi+4], ah
 000003FF  C6 47 08 00		    mov [edi+8], BYTE PTR 0
 00000403  C6 47 09 C9		    mov [edi+9], BYTE PTR 0C9h
 00000407  C6 47 0A 77		    mov [edi+0ah], BYTE PTR 119

				    ; prepare counter for looping
 0000040B  33 C9		    xor ecx, ecx

 0000040D			notes: 
 0000040D  3B 0D 000001FE R	    cmp ecx, measureCount
 00000413  0F 84 0000068D	    je write
 00000419  E8 00000000 E	    call drumChoose
				    ; back to adding music notes
 0000041E			notesContinue:
 0000041E  B8 0000000B		    mov eax, 11
				    invoke randRange, al
 00000429  03 05 000001F6 R	    add eax, cPitch
 0000042F  A2 00000203 R	    mov currentPitch, al
 00000434  8B C1		    mov eax, ecx
 00000436  33 D2		    xor edx, edx
 00000438  BB 00000021		    mov ebx, 33
 0000043D  F7 E3		    mul ebx
 0000043F  83 C0 0B		    add eax, 11
 00000442  8B F8		    mov edi, eax
 00000444  03 3D 00000223 R	    add edi, track1Chunk
 0000044A  33 D2		    xor edx, edx
 0000044C  B8 0000000E		    mov eax, 14
				    invoke randRange, al
 00000457  BB 00000003		    mov ebx, 3
 0000045C  F7 E3		    mul ebx
 0000045E  A2 00000204 R	    mov currentChord, al
 00000463  33 C0		    xor eax, eax
 00000465  A0 00000204 R	    mov al, currentChord
 0000046A  BE 00000186 R	    mov esi, OFFSET chordVals
 0000046F  03 F0		    add esi, eax

 00000471  33 D2		    xor edx, edx
 00000473  8A 15 00000203 R	    mov dl, currentPitch
 00000479  2B 15 000001F6 R	    sub edx, cPitch
 0000047F  C1 E2 02		    shl edx, 2
 00000482  81 C2 000000FF R	    add edx, OFFSET rootNames
 00000488  51			    push ecx
				    invoke writeConsole, edx, 2
 00000491  33 D2		    xor edx, edx
 00000493  8A 15 00000204 R	    mov dl, currentChord
 00000499  D1 E2		    shl edx, 1
 0000049B  81 C2 0000012D R	    add edx, OFFSET chordNames
				    invoke writeConsole, edx, 5
				    invoke writeConsole, offset crLfStr, 2
 000004B5  59			    pop ecx

 000004B6  33 D2		    xor edx, edx

				    ; bottom note on
				    INVOKE noteEvent, 0, 90h, currentPitch

				    ; second note on
 000004CA  8A 15 00000203 R	    mov dl, currentPitch
 000004D0  02 16		    add dl, [esi]
				    INVOKE noteEvent, 0, 90h, dl

				    ; third note on
 000004E1  8A 15 00000203 R	    mov dl, currentPitch
 000004E7  02 56 01		    add dl, [esi+1]
				    INVOKE noteEvent, 0, 90h, dl

				    ; top note on
 000004F9  8A 15 00000203 R	    mov dl, currentPitch
 000004FF  02 56 02		    add dl, [esi+2]
				    INVOKE noteEvent, 0, 90h, dl

				    ; bottom note off
 00000511  8A 15 00000203 R	    mov dl, currentPitch
 00000517  C6 07 83		    mov [edi], BYTE PTR 83h
 0000051A  C6 47 01 00		    mov [1+edi], BYTE PTR 00h
 0000051E  C6 47 02 80		    mov [2+edi], BYTE PTR 80h
 00000522  88 57 03		    mov [3+edi], dl
 00000525  C6 47 04 40		    mov [4+edi], BYTE PTR 40h
 00000529  83 C7 05		    add edi, 5

				    ; second note off
 0000052C  8A 15 00000203 R	    mov dl, currentPitch
 00000532  02 16		    add dl, [esi]
				    INVOKE noteEvent, 0, 80h, dl

				    ; third note off
 00000543  8A 15 00000203 R	    mov dl, currentPitch
 00000549  02 56 01		    add dl, [esi+1]
				    INVOKE noteEvent, 0, 80h, dl

				    ; top note off
 0000055B  8A 15 00000203 R	    mov dl, currentPitch
 00000561  02 56 02		    add dl, [esi+2]
				    INVOKE noteEvent, 0, 80h, dl

 00000573  8B C1		    mov eax, ecx
 00000575  BB 00000040		    mov ebx, 40h
 0000057A  33 D2		    xor edx, edx
 0000057C  F7 E3		    mul ebx
 0000057E  83 C0 0B		    add eax, 0bh
 00000581  8B F8		    mov edi, eax
 00000583  03 3D 00000227 R	    add edi, track2Chunk
 00000589  33 C0		    xor eax, eax
 0000058B  A0 00000204 R	    mov al, currentChord
 00000590  BE 00000186 R	    mov esi, OFFSET chordVals
 00000595  03 F0		    add esi, eax
 00000597  B8 00000002		    mov eax, 2
				    invoke randRange, al
 000005A2  83 F8 01		    cmp eax, 1
 000005A5  72 0C		    jb guitarPattern0
 000005A7  0F 84 000001AD	    je guitarPattern1
 000005AD  0F 87 0000034D	    ja guitarPattern2

 000005B3			guitarPattern0:
				    ; bottom guitar note on
 000005B3  8A 15 00000203 R	    mov dl, currentPitch
 000005B9  80 EA 0C		    sub dl, 12
				    INVOKE noteEvent, 0, 91h, dl

				    ; top guitar note on
 000005CB  8A 15 00000203 R	    mov dl, currentPitch
 000005D1  80 EA 0C		    sub dl, 12
 000005D4  02 56 02		    add dl, [esi+2]
				    INVOKE noteEvent, 30h, 91h, dl

				    ; bottom guitar note off
 000005E6  8A 15 00000203 R	    mov dl, currentPitch
 000005EC  80 EA 0C		    sub dl, 12
				    INVOKE noteEvent, 30h, 81h, dl


				    ; second guitar note on
 000005FE  8A 15 00000203 R	    mov dl, currentPitch
 00000604  80 EA 0C		    sub dl, 12
 00000607  02 16		    add dl, [esi]
				    INVOKE noteEvent, 0, 91h, dl

				    ; top guitar note off
 00000618  8A 15 00000203 R	    mov dl, currentPitch
 0000061E  80 EA 0C		    sub dl, 12
 00000621  02 56 02		    add dl, [esi+2]
				    INVOKE noteEvent, 30h, 81h, dl
				    
				    ; third guitar note on
 00000633  8A 15 00000203 R	    mov dl, currentPitch
 00000639  80 EA 0C		    sub dl, 12
 0000063C  02 56 01		    add dl, [esi+1]
				    INVOKE noteEvent, 0, 91h, dl

				    ; second guitar note off
 0000064E  8A 15 00000203 R	    mov dl, currentPitch
 00000654  80 EA 0C		    sub dl, 12
 00000657  02 56 01		    add dl, [esi+1]
				    INVOKE noteEvent, 30h, 81h, dl

				    ; bottom guitar note on
 00000669  8A 15 00000203 R	    mov dl, currentPitch
 0000066F  80 EA 0C		    sub dl, 12
				    INVOKE noteEvent, 0, 91h, dl

				    ; third guitar note off
 00000681  8A 15 00000203 R	    mov dl, currentPitch
 00000687  80 EA 0C		    sub dl, 12
 0000068A  02 56 01		    add dl, [esi+1]
				    INVOKE noteEvent, 30h, 81h, dl


				    ; top guitar note on
 0000069C  8A 15 00000203 R	    mov dl, currentPitch
 000006A2  80 EA 0C		    sub dl, 12
 000006A5  02 56 02		    add dl, [esi+2]
				    INVOKE noteEvent, 0, 91h, dl


				    ; bottom guitar note off
 000006B7  8A 15 00000203 R	    mov dl, currentPitch
 000006BD  80 EA 0C		    sub dl, 12
				    INVOKE noteEvent, 30h, 81h, dl


				    ; second guitar note on
 000006CF  8A 15 00000203 R	    mov dl, currentPitch
 000006D5  80 EA 0C		    sub dl, 12
 000006D8  02 16		    add dl, [esi]
				    INVOKE noteEvent, 0, 91h, dl

				    ; top guitar note off
 000006E9  8A 15 00000203 R	    mov dl, currentPitch
 000006EF  80 EA 0C		    sub dl, 12
 000006F2  02 56 02		    add dl, [esi+2]
				    INVOKE noteEvent, 30h, 81h, dl

				    ; third guitar note on
 00000704  8A 15 00000203 R	    mov dl, currentPitch
 0000070A  80 EA 0C		    sub dl, 12
 0000070D  02 56 01		    add dl, [esi+1]
				    INVOKE noteEvent, 0, 91h, dl


				    ; second guitar note off
 0000071F  8A 15 00000203 R	    mov dl, currentPitch
 00000725  80 EA 0C		    sub dl, 12
 00000728  02 16		    add dl, [esi]
				    INVOKE noteEvent, 30h, 81h, dl

				    ; third guitar note off
 00000739  8A 15 00000203 R	    mov dl, currentPitch
 0000073F  80 EA 0C		    sub dl, 12
 00000742  02 56 01		    add dl, [esi+1]
				    INVOKE noteEvent, 0, 81h, dl

 00000754  41			    inc ecx
 00000755  E9 FFFFFCB3		    jmp notes

 0000075A			guitarPattern1:
				    ; bottom guitar note on
 0000075A  8A 15 00000203 R	    mov dl, currentPitch
 00000760  80 EA 0C		    sub dl, 12
				    INVOKE noteEvent, 0, 91h, dl

				    ; third guitar note on
 00000772  8A 15 00000203 R	    mov dl, currentPitch
 00000778  80 EA 0C		    sub dl, 12
 0000077B  02 56 01		    add dl, [esi+1]
				    INVOKE noteEvent, 30h, 91h, dl

				    ; bottom guitar note off
 0000078D  8A 15 00000203 R	    mov dl, currentPitch
 00000793  80 EA 0C		    sub dl, 12
				    INVOKE noteEvent, 30h, 81h, dl

				    ; second guitar note on
 000007A5  8A 15 00000203 R	    mov dl, currentPitch
 000007AB  80 EA 0C		    sub dl, 12
 000007AE  02 16		    add dl, [esi]
				    INVOKE noteEvent, 0, 91h, dl

				    ; third guitar note off
 000007BF  8A 15 00000203 R	    mov dl, currentPitch
 000007C5  80 EA 0C		    sub dl, 12
 000007C8  02 56 01		    add dl, [esi+1]
				    INVOKE noteEvent, 30h, 81h, dl
				    
				    ; top guitar note on
 000007DA  8A 15 00000203 R	    mov dl, currentPitch
 000007E0  80 EA 0C		    sub dl, 12
 000007E3  02 56 02		    add dl, [esi+2]
				    INVOKE noteEvent, 0, 91h, dl

				    ; second guitar note off
 000007F5  8A 15 00000203 R	    mov dl, currentPitch
 000007FB  80 EA 0C		    sub dl, 12
 000007FE  02 16		    add dl, [esi]
				    INVOKE noteEvent, 30h, 81h, dl

				    ; bottom guitar note on
 0000080F  8A 15 00000203 R	    mov dl, currentPitch
 00000815  80 EA 0C		    sub dl, 12
				    INVOKE noteEvent, 0, 91h, dl

				    ; top guitar note off
 00000827  8A 15 00000203 R	    mov dl, currentPitch
 0000082D  80 EA 0C		    sub dl, 12
 00000830  02 56 02		    add dl, [esi+2]
				    INVOKE noteEvent, 30h, 81h, dl

				    ; third guitar note on
 00000842  8A 15 00000203 R	    mov dl, currentPitch
 00000848  80 EA 0C		    sub dl, 12
 0000084B  02 56 01		    add dl, [esi+1]
				    INVOKE noteEvent, 0, 91h, dl

				    ; bottom guitar note off
 0000085D  8A 15 00000203 R	    mov dl, currentPitch
 00000863  80 EA 0C		    sub dl, 12
				    INVOKE noteEvent, 30h, 81h, dl

				    ; second guitar note on
 00000875  8A 15 00000203 R	    mov dl, currentPitch
 0000087B  80 EA 0C		    sub dl, 12
 0000087E  02 16		    add dl, [esi]
				    INVOKE noteEvent, 0, 91h, dl

				    ; third guitar note off
 0000088F  8A 15 00000203 R	    mov dl, currentPitch
 00000895  80 EA 0C		    sub dl, 12
 00000898  02 56 01		    add dl, [esi+1]
				    INVOKE noteEvent, 30h, 81h, dl

				    ; top guitar note on
 000008AA  8A 15 00000203 R	    mov dl, currentPitch
 000008B0  80 EA 0C		    sub dl, 12
 000008B3  02 56 02		    add dl, [esi+2]
				    INVOKE noteEvent, 0, 91h, dl

				    ; second guitar note off
 000008C5  8A 15 00000203 R	    mov dl, currentPitch
 000008CB  80 EA 0C		    sub dl, 12
 000008CE  02 16		    add dl, [esi]
				    INVOKE noteEvent, 30h, 81h, dl

				    ; top guitar note off
 000008DF  8A 15 00000203 R	    mov dl, currentPitch
 000008E5  80 EA 0C		    sub dl, 12
 000008E8  02 56 02		    add dl, [esi+2]
				    INVOKE noteEvent, 0, 81h, dl
				    
 000008FA  41			    inc ecx
 000008FB  E9 FFFFFB0D		    jmp notes

 00000900			guitarPattern2:
				    ; bottom guitar note on
 00000900  8A 15 00000203 R	    mov dl, currentPitch
 00000906  80 EA 0C		    sub dl, 12
				    INVOKE noteEvent, 0, 91h, dl

				    ; top guitar note on
 00000918  8A 15 00000203 R	    mov dl, currentPitch
 0000091E  80 EA 0C		    sub dl, 12
 00000921  02 56 02		    add dl, [esi+2]
				    INVOKE noteEvent, 0, 91h, dl

				    ; bottom guitar note off
 00000933  8A 15 00000203 R	    mov dl, currentPitch
 00000939  80 EA 0C		    sub dl, 12
				    INVOKE noteEvent, 60h, 81h, dl

				    ; second guitar note on
 0000094B  8A 15 00000203 R	    mov dl, currentPitch
 00000951  80 EA 0C		    sub dl, 12
 00000954  02 16		    add dl, [esi]
				    INVOKE noteEvent, 0, 91h, dl

				    ; top guitar note off
 00000965  8A 15 00000203 R	    mov dl, currentPitch
 0000096B  80 EA 0C		    sub dl, 12
 0000096E  02 56 02		    add dl, [esi+2]
				    INVOKE noteEvent, 30h, 81h, dl
				    
				    ; third guitar note on
 00000980  8A 15 00000203 R	    mov dl, currentPitch
 00000986  80 EA 0C		    sub dl, 12
 00000989  02 56 01		    add dl, [esi+1]
				    INVOKE noteEvent, 0, 91h, dl

				    ; second guitar note off
 0000099B  8A 15 00000203 R	    mov dl, currentPitch
 000009A1  80 EA 0C		    sub dl, 12
 000009A4  02 16		    add dl, [esi]
				    INVOKE noteEvent, 30h, 81h, dl

				    ; bottom guitar note on
 000009B5  8A 15 00000203 R	    mov dl, currentPitch
 000009BB  80 EA 0C		    sub dl, 12
				    INVOKE noteEvent, 0, 91h, dl

				    ; third guitar note off
 000009CD  8A 15 00000203 R	    mov dl, currentPitch
 000009D3  80 EA 0C		    sub dl, 12
 000009D6  02 56 01		    add dl, [esi+1]
				    INVOKE noteEvent, 30h, 81h, dl

				    ; top guitar note on
 000009E8  8A 15 00000203 R	    mov dl, currentPitch
 000009EE  80 EA 0C		    sub dl, 12
 000009F1  02 56 02		    add dl, [esi+2]
				    INVOKE noteEvent, 0, 91h, dl

				    ; bottom guitar note off
 00000A03  8A 15 00000203 R	    mov dl, currentPitch
 00000A09  80 EA 0C		    sub dl, 12
				    INVOKE noteEvent, 30h, 81h, dl

				    ; second guitar note on
 00000A1B  8A 15 00000203 R	    mov dl, currentPitch
 00000A21  80 EA 0C		    sub dl, 12
 00000A24  02 16		    add dl, [esi]
				    INVOKE noteEvent, 0, 91h, dl

				    ; top guitar note off
 00000A35  8A 15 00000203 R	    mov dl, currentPitch
 00000A3B  80 EA 0C		    sub dl, 12
 00000A3E  02 56 02		    add dl, [esi+2]
				    INVOKE noteEvent, 30h, 81h, dl

				    ; third guitar note on
 00000A50  8A 15 00000203 R	    mov dl, currentPitch
 00000A56  80 EA 0C		    sub dl, 12
 00000A59  02 56 01		    add dl, [esi+1]
				    INVOKE noteEvent, 0, 91h, dl

				    ; second guitar note off
 00000A6B  8A 15 00000203 R	    mov dl, currentPitch
 00000A71  80 EA 0C		    sub dl, 12
 00000A74  02 16		    add dl, [esi]
				    INVOKE noteEvent, 30h, 81h, dl

				    ; third guitar note off
 00000A85  8A 15 00000203 R	    mov dl, currentPitch
 00000A8B  80 EA 0C		    sub dl, 12
 00000A8E  02 56 01		    add dl, [esi+1]
				    INVOKE noteEvent, 0, 81h, dl

 00000AA0  41			    inc ecx
 00000AA1  E9 FFFFF967		    jmp notes

 00000AA6			write:
				    ; write the first track
 00000AA6  8B 0D 000001EA R	    mov ecx, track1ChunkLen
 00000AAC  A1 00000217 R	    mov eax, hFile
 00000AB1  8B 15 00000223 R	    mov edx, track1Chunk
				    invoke fileWrite, eax, edx, ecx
				    .if EAX == 0
 00000AC3  E9 000000BD		        jmp closeAndQuit
				   .endif
				    invoke HeapFree, hHeap, 0, track1Chunk

				    ; write the second track
 00000ADB  8B 0D 000001EE R	    mov ecx, track2ChunkLen
 00000AE1  A1 00000217 R	    mov eax, hFile
 00000AE6  8B 15 00000227 R	    mov edx, track2Chunk
				    invoke fileWrite, eax, edx, ecx
				    .if EAX == 0
 00000AF8  E9 00000088		        jmp closeAndQuit
				    .endif
				    invoke HeapFree, hHeap, 0, track2Chunk

 00000B10  A1 00000000 E	    mov eax, drumOffset
 00000B15  83 C0 04		    add eax, 4h
 00000B18  A3 000001F2 R	    mov track3ChunkLen, eax
 00000B1D  8B 3D 0000022B R	    mov edi, track3Chunk
 00000B23  A1 000001F2 R	    mov eax, track3ChunkLen
 00000B28  83 E8 08		    sub eax, 8
 00000B2B  88 47 07		    mov [edi+7], al
 00000B2E  88 67 06		    mov [edi+6], ah
 00000B31  C1 E8 08		    shr eax, 8
 00000B34  88 67 05		    mov [edi+5], ah
 00000B37  C1 E8 08		    shr eax, 8
 00000B3A  88 67 04		    mov [edi+4], ah
 00000B3D  03 3D 000001F2 R	    add edi, track3ChunkLen
 00000B43  C6 47 FC 00		    mov [edi-4], BYTE PTR 0
 00000B47  C6 47 FD FF		    mov [edi-3], BYTE PTR 0ffh
 00000B4B  C6 47 FE 2F		    mov [edi-2], BYTE PTR 2fh
 00000B4F  C6 47 FF 00		    mov [edi-1], BYTE PTR 0

				    ; write the third track
 00000B53  8B 0D 000001F2 R	    mov ecx, track3ChunkLen
 00000B59  A1 00000217 R	    mov eax, hFile
 00000B5E  8B 15 0000022B R	    mov edx, track3Chunk
				    invoke fileWrite, eax, edx, ecx
				    .if EAX == 0
 00000B70  EB 13		        jmp closeAndQuit
				    .endif
				    invoke HeapFree, hHeap, 0, track3Chunk

 00000B85			closeAndQuit:
 00000B85  A1 00000217 R	    mov eax, hFile
				    invoke CloseHandle, eax         ; using windows api

 00000B90			quit:
					INVOKE ExitProcess, 0			; end the program
 00000B97			main ENDP

				PUBLIC main
				END main
Microsoft (R) Macro Assembler Version 14.26.28806.0	    06/29/20 17:34:27
..\..\Programming\midi-asm\main.asm			     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000022F Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000B97 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ConsoleWriteHex  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Error  . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000000F Public STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTimeFormatA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
drumChoose . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
fileCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
fileWrite  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
hexStrToNum  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
initIO . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 0000000F _TEXT	Length= 00000B88 Public STDCALL
  tempoContinue0 . . . . . . . .	L Near	 000000F6 _TEXT	
  tempoContinue  . . . . . . . .	L Near	 00000138 _TEXT	
  random . . . . . . . . . . . .	L Near	 000001BA _TEXT	
  randomContinue0  . . . . . . .	L Near	 00000210 _TEXT	
  randomContinue1  . . . . . . .	L Near	 00000252 _TEXT	
  trackPrep  . . . . . . . . . .	L Near	 00000292 _TEXT	
  notes  . . . . . . . . . . . .	L Near	 0000040D _TEXT	
  notesContinue  . . . . . . . .	L Near	 0000041E _TEXT	
  guitarPattern0 . . . . . . . .	L Near	 000005B3 _TEXT	
  guitarPattern1 . . . . . . . .	L Near	 0000075A _TEXT	
  guitarPattern2 . . . . . . . .	L Near	 00000900 _TEXT	
  write  . . . . . . . . . . . .	L Near	 00000AA6 _TEXT	
  closeAndQuit . . . . . . . . .	L Near	 00000B85 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 00000B90 _TEXT	
noteEvent  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
randInit . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
randRange  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
readConsole  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
writeConsole . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
LOCALE_SYSTEM_DEFAULT  . . . . .	Number	 00000800h   
LOCALE_USER_DEFAULT  . . . . . .	Number	 00000400h   
NULL . . . . . . . . . . . . . .	Number	 00000000h   
bytesRead  . . . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
bytesWritten . . . . . . . . . .	DWord	 0000021F _DATA	
cPitch . . . . . . . . . . . . .	DWord	 000001F6 _DATA	
chordNames2  . . . . . . . . . .	Byte	 00000157 _DATA	
chordNames . . . . . . . . . . .	Byte	 0000012D _DATA	
chordVals  . . . . . . . . . . .	Byte	 00000186 _DATA	
consoleInHandle  . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
consoleOutHandle . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
crLfStr  . . . . . . . . . . . .	Byte	 00000000 FLAT	External STDCALL
currentChord . . . . . . . . . .	Byte	 00000204 _DATA	
currentPitch . . . . . . . . . .	Byte	 00000203 _DATA	
drumOffset . . . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
errorMsg . . . . . . . . . . . .	Byte	 00000000 FLAT	External STDCALL
fileNamePromptLen  . . . . . . .	DWord	 00000000 FLAT	External STDCALL
fileNamePrompt . . . . . . . . .	Byte	 00000000 FLAT	External STDCALL
fileName . . . . . . . . . . . .	Byte	 00000000 _DATA	
format . . . . . . . . . . . . .	Byte	 0000020E _DATA	
hFile  . . . . . . . . . . . . .	DWord	 00000217 _DATA	
hHeap  . . . . . . . . . . . . .	DWord	 0000021B _DATA	
headerChunkLen . . . . . . . . .	Number	 0000000Eh   
headerChunk  . . . . . . . . . .	Byte	 000001B3 _DATA	
inString . . . . . . . . . . . .	Byte	 00000205 _DATA	
invalidRange . . . . . . . . . .	Byte	 00000000 FLAT	External STDCALL
maxMeasurePromptLen  . . . . . .	DWord	 00000000 FLAT	External STDCALL
maxMeasurePrompt . . . . . . . .	Byte	 00000000 FLAT	External STDCALL
maxTempoPromptLen  . . . . . . .	DWord	 00000000 FLAT	External STDCALL
maxTempoPrompt . . . . . . . . .	Byte	 00000000 FLAT	External STDCALL
measureCount . . . . . . . . . .	DWord	 000001FE _DATA	
measurePromptLen . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
measurePrompt  . . . . . . . . .	Byte	 00000000 FLAT	External STDCALL
minMeasurePromptLen  . . . . . .	DWord	 00000000 FLAT	External STDCALL
minMeasurePrompt . . . . . . . .	Byte	 00000000 FLAT	External STDCALL
minMeasures  . . . . . . . . . .	DWord	 000001FA _DATA	
minTempoPromptLen  . . . . . . .	DWord	 00000000 FLAT	External STDCALL
minTempoPrompt . . . . . . . . .	Byte	 00000000 FLAT	External STDCALL
minTempo . . . . . . . . . . . .	DWord	 000001E2 _DATA	
numStr . . . . . . . . . . . . .	Byte	 00000000 FLAT	External STDCALL
outMeasurePromptLen  . . . . . .	DWord	 00000000 FLAT	External STDCALL
outMeasurePrompt . . . . . . . .	Byte	 00000000 FLAT	External STDCALL
outTempoPromptLen  . . . . . . .	DWord	 00000000 FLAT	External STDCALL
outTempoPrompt . . . . . . . . .	Byte	 00000000 FLAT	External STDCALL
rootNames  . . . . . . . . . . .	Byte	 000000FF _DATA	
sequenceCount  . . . . . . . . .	Byte	 00000202 _DATA	
tempoPromptLen . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
tempoPrompt  . . . . . . . . . .	Byte	 00000000 FLAT	External STDCALL
tempo  . . . . . . . . . . . . .	DWord	 000001E6 _DATA	
testStr  . . . . . . . . . . . .	Byte	 00000000 FLAT	External STDCALL
track0ChunkLen . . . . . . . . .	Number	 00000021h   
track0Chunk  . . . . . . . . . .	Byte	 000001C1 _DATA	
track1ChunkLen . . . . . . . . .	DWord	 000001EA _DATA	
track1Chunk  . . . . . . . . . .	DWord	 00000223 _DATA	
track2ChunkLen . . . . . . . . .	DWord	 000001EE _DATA	
track2Chunk  . . . . . . . . . .	DWord	 00000227 _DATA	
track3ChunkLen . . . . . . . . .	DWord	 000001F2 _DATA	
track3Chunk  . . . . . . . . . .	DWord	 0000022B _DATA	Public STDCALL

	   0 Warnings
	   0 Errors
